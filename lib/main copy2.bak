#include <Arduino.h>
#include <Wire.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>
#include <U8g2lib.h>
#include <Adafruit_MPU6050.h>
#include <SD.h>
#include <SPI.h>
#include <vector>
#include <algorithm>
#include <WiFi.h>
#include <AsyncTCP.h>
#include "SPIFFS.h"
#include <ESPAsyncWebServer.h>
#include <Arduino_JSON.h>
#include "seeOLED.h"
#include "standupTableMovement.h"
#include "LEDeffects.h"

bool bLED = LOW;
#define LED_PIN0 13 // Test Bench = option #1: GPIO25(pin 8), option #2:GPIO13(pin 3) for the ESP32
#define LED_PIN1 12 // Standup Desk = option #1: GPIO26(pin 7), option #2:GPIO12(pin 4) for the ESP32
#define LED_PIN2 14 // Storage Bench = option #1: GPIO27(pin 6), option #2:GPIO14(pin 5) for the ESP32
#define NUM_LED_PIN0 278 // Test Bench
#define NUM_LED_PIN1 222 // Standup Desk
#define NUM_LED_PIN2 242 // Storage Bench
int BRIGHTNESS = 32; // 0 to 255 of the LEDs brightness
#define LED_TYPE WS2812B // type works for the WS2815 which I am using
#define COLOR_ORDER RGB
CRGB led_Strip0[NUM_LED_PIN0]; // Test Bench
CRGB led_Strip1[NUM_LED_PIN1]; // Standup Desk
CRGB led_Strip2[NUM_LED_PIN2]; // Storage Bench

#define SCK 18  // GPIO 18 = VSPI_CLK = Pin 22 on ESP32 DEVKIT V1
#define MISO 19 // GPIO 19 = VSPI_MISO = pin 21 on ESP32 DEVKIT V1
#define MOSI 23 // GPIO 23 = VSPI_MOSI = pin 16 on ESP32 DEVKIT V1
#define CS 5    // GPIO 5 = VSPI_CS = pin 23 on ESP32 DEVKIT V1

File file;
const char *file0 = "/";
SPIClass spi = SPIClass(VSPI);

unsigned long lastTime = 0;
unsigned long lastTimeTemperature = 0;
unsigned long lastTimeAcc = 0;
unsigned long gyroDelay = 10;
unsigned long temperatureDelay = 1000;
unsigned long accelerometerDelay = 200;

#define OLED_CLOCK 22 // SCA pin on Display = pin 17 (I2C_SCL) on ESP32 DEVKIT V1 = GPIO 22
#define OLED_DATA 21  // SDL pin on display = pin 20 (I2C_SDA) on ESP32 DEVKIT V1 = GPIO 21
U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, OLED_CLOCK, OLED_DATA, U8X8_PIN_NONE); // This works but according to the function, it shouldn't
float fps = 0; // to start recording the fps of the display

#define SCREEN_I2C_ADDR 0x3C // or 0x3C // also should be the same address as the MPU6050 which causes problems
#define SCREEN_WIDTH 128     // OLED display width, in pixels
#define SCREEN_HEIGHT 64     // OLED display height, in pixels
#define OLED_RST_PIN -1      // Reset pin (-1 if not available)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RST_PIN);

bool dataChanged = false;
bool ledEffectActive = false;
bool gyroOrAccelChanged = false;

void ledStripTest(CRGB *leds, int numLEDs) {
    FastLED.clear();
    FastLED.show();
    for (int i = 0; i < numLEDs; i++) {
        leds[i] = CRGB::White; // set our current dot to red
        FastLED.show();
        leds[i] = CRGB::Black; // set our current dot to black before we continue
    }
};

double FramesPerSecond(double seconds) {
    static double framesPerSecond;
    framesPerSecond = (framesPerSecond * 0.9) + (1.0 / seconds * 0.1);
    return framesPerSecond;
}

void DrawLinesAndGraphicsFrame(int FramesPerSecond) {
    u8g2.clearBuffer();
    u8g2.home();
    u8g2.setCursor(3, oled_LineH * 2 + 2);
    u8g2.print("Hello");
    u8g2.setCursor(3, oled_LineH * 3 + 2);
    u8g2.print("World");
    u8g2.setCursor(3, oled_LineH * 4 + 2);
    u8g2.printf("%03d \n", FramesPerSecond); // Placeholder for framerate
    u8g2.drawFrame(0, 0, u8g2.getWidth(), u8g2.getHeight()); // Draw a border around the display
    for (int x = 0; x < u8g2.getWidth(); x += 4)  {
        u8g2.drawLine(x, 0, u8g2.getWidth() - x, u8g2.getHeight());
    }
    const int reticleY = u8g2.getHeight() / 2;           // Vertical center of display
    const int reticleR = u8g2.getHeight() / 4 - 2;       // Slightly less than 1/4 screen height
    const int reticleX = u8g2.getWidth() - reticleR - 8; // Right-justified with a small margin
    for (int r = reticleR; r > 0; r -= 3) { // draw a series of nested circles
        u8g2.drawCircle(reticleX, reticleY, r);
        u8g2.drawHLine(reticleX - reticleR - 5, reticleY, 2 * reticleR + 10); // H line through reticle center
        u8g2.drawVLine(reticleX, reticleY - reticleR - 5, 2 * reticleR + 10); // V line through reticle center
    }
    u8g2.sendBuffer(); // Send it out
};

void setup() {
    delay(1000); // power-up safety delay
    pinMode(LED_BUILTIN, OUTPUT); // this is the LED on the ESP32 board as output
    pinMode(LED_PIN0, OUTPUT);    // This is the Test Bench LEDs as output
    pinMode(LED_PIN1, OUTPUT);    // This is the Stand Up Desk LEDs as output
    pinMode(LED_PIN2, OUTPUT);    // This is the Storage bench LEDS as output
    Serial.begin(115200);
    while (!Serial) ;

    Serial.println("Starting setup"); // used for testing purposes only
    FastLED.addLeds<LED_TYPE, LED_PIN0, COLOR_ORDER>(led_Strip0, NUM_LED_PIN0).setCorrection(TypicalLEDStrip);
    FastLED.addLeds<LED_TYPE, LED_PIN1, COLOR_ORDER>(led_Strip1, NUM_LED_PIN1).setCorrection(TypicalLEDStrip);
    FastLED.addLeds<LED_TYPE, LED_PIN2, COLOR_ORDER>(led_Strip2, NUM_LED_PIN2).setCorrection(TypicalLEDStrip);
    FastLED.setBrightness(BRIGHTNESS);
    FastLED.clear();

    Serial.println("Starting LED Strip test");
    ledStripTest(led_Strip0, NUM_LED_PIN0); // this works
    ledStripTest(led_Strip1, NUM_LED_PIN1); // this works
    ledStripTest(led_Strip2, NUM_LED_PIN2); // this works

    u8g2.begin();
    u8g2.clear();
    u8g2.setFont(u8g2_font_profont10_tf);
    oled_LineH = u8g2.getFontAscent() - u8g2.getFontDescent();
    if (!u8g2.begin()) {
        Serial.println(F("SSD1306 allocation failed!"));
        for (;;) {
            // don't proceed, loop forever
        } 
    }

    display.begin(SSD1306_SWITCHCAPVCC, SCREEN_I2C_ADDR);
    display.clearDisplay();
 
    if (!SD.begin(CS)) {
        Serial.println("Card Mount Failed, Card failed, or not present");
        return;
    }
    spi.begin(SCK, MISO, MOSI, CS);
    uint8_t cardType = SD.cardType();
    if (cardType == CARD_NONE) {
        Serial.println("No SD card attached");
        return;
    }
    Serial.print("SD Card Type: ");
    if (cardType == CARD_MMC) {
        Serial.println("MMC");
    }
    else if (cardType == CARD_SD) {
        Serial.println("SDSC");
    }
    else if (cardType == CARD_SDHC) {
        Serial.println("SDHC");
    }
    else {
        Serial.println("UNKNOWN");
    }
    uint64_t cardSize = SD.cardSize() / (1024 * 1024);
    Serial.printf("SD Card Size: %lluMB\n", cardSize);
    
    // testing OLED Graphics
    Serial.println("Starting OLED test");
    for (int i = 0; i < 3000; i++){
        startingOLED(); // displays the arduino logo when starting up the OLED display
    }

    Serial.println("Setup complete"); // used for testing purposes only
};

// version 1
void loop() {

    for (;;) {
        bLED = !bLED; // toggle LED State
        digitalWrite(LED_BUILTIN, bLED);
        double dStart = millis() / 1000.0; // record the start time
        DrawLinesAndGraphicsFrame(fps);
        double dEnd = millis() / 1000.0; // record the completion time
        fps = FramesPerSecond(dEnd - dStart);
        // DrawLinesAndGraphicsFrame(0);
    }
    Serial.println("Restarting Loop");
};

// version 2
void loop()
{
    // =============================
    // Setup for the millis function
    // =============================
    // Removing delay command and using millis variables for the various functions
    // timing variables
    // unsigned long oledPreviousMillis = 0;
    // unsigned long oledanimPreviousMillis = 0;
    // unsigned long ledPreviousMillis = 0;
    // unsigned long lastGyroCheckTime = 0;
    // unsigned long movingPreviousMillis = 0;
    // unsigned long currentMillis = 0;
    // // delay equivalence
    // const unsigned int timePeriod010 = 10;   // Delay equal to 10 ms
    // const unsigned int timePeriod005 = 5;    // delay equal to 5 ms
    // const unsigned int TimePeriod05 = 500;   // Delay equal to 1/2 second
    // const unsigned int timePeriod1 = 1000;   // Delay equal to 1 sec pause
    // const unsigned int timePeriod2 = 2000;   // Delay equal to 2 second pause
    // const unsigned int timePeriod10 = 10000; // Delay equal to 10 seconds pause
    // const unsigned int timePeriod15 = 15000; // Delay equal to 15 seconds duration
    // const unsigned int timePeriod30 = 30000; // Delay equal to 30 second duration
    // =============================

    Serial.println("starting loop"); // used for testing purposes only
    FastLED.clear(); // clear whatever is on the LED strips whenever the loop starts and/or is restarted
    
    bLED = !bLED; // toggle LED State
    digitalWrite(LED_BUILTIN, bLED);
    currentMillis = millis();
    // Serial.print("Starting millis= ");
    // Serial.println(currentMillis); // used for testing purposes only : print curent time
    // Serial.print("\n");    

    sensors_event_t a, g, temp;
    mpu.getEvent(&a, &g, &temp);
    // Subtract bias
    a.acceleration.x -= accelBias[0];
    a.acceleration.y -= accelBias[1];
    a.acceleration.z -= accelBias[2];

    tableMovement();
    
    startIndex = startIndex + 1; /* motion speed */
    double dStart = millis() / 1000.0; // record the start time
    // NOTE: there must be an action between variables dStart and dEnd to report an actual fps

    randomizedLEDEffect(); // Execute the LED effects

    displayOLED(fps); // displays Gyro infomration and FPS using millis
    
    double dEnd = millis() / 1000.0; // record the completion time
    fps = FramesPerSecond(dEnd - dStart);
    
    Serial.println("Restarting Loop");
};
